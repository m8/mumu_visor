
main.elf:     file format elf32-i386
main.elf

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x0000007b memsz 0x0000007b flags r-x
    LOAD off    0x00000c7b vaddr 0x00007c7b paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sig          00000002  00007c7b  00007dfe  00000c7b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_line   000000ae  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   000000a6  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000080  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000040  00000000  00000000  00000e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_str    00002600  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_macro  000007d7  00000000  00000000  00003498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      0000002a  00000000  00000000  00003c6f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007c7b l    d  .sig	00000000 .sig
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 entry.o
00007c05 l       .text	00000000 .setcs
00000000 l    df *ABS*	00000000 main.c
00007c7b g       .text	00000000 __bss_end
00007c00 g       .text	00000000 mystart
00008c7d g       .sig	00000000 __stack_top
00007c7b g       .text	00000000 __bss_start
00007c17 g     F .text	00000064 main
00007c7d g       .sig	00000000 __stack_bottom



Disassembly of section .text:

00007c00 <mystart>:
.code16
.text
.global mystart
mystart:
    ljmp $0, $.setcs
    7c00:	ea                   	.byte 0xea
    7c01:	05                   	.byte 0x5
    7c02:	7c 00                	jl     7c04 <mystart+0x4>
	...

00007c05 <.setcs>:
.setcs:
    xor %ax, %ax
    7c05:	31 c0                	xor    %eax,%eax
    mov %ax, %ds
    7c07:	8e d8                	mov    %eax,%ds
    mov %ax, %es
    7c09:	8e c0                	mov    %eax,%es
    mov %ax, %ss
    7c0b:	8e d0                	mov    %eax,%ss
    mov $__stack_top, %esp
    7c0d:	66 bc 7d 8c          	mov    $0x8c7d,%sp
    7c11:	00 00                	add    %al,(%eax)
    cld
    7c13:	fc                   	cld    
    call main
    7c14:	e8                   	.byte 0xe8
	...

00007c17 <main>:
void main(void) {
    7c17:	f3 0f 1e fb          	endbr32 
    7c1b:	66 55                	push   %bp
    7c1d:	66 89 e5             	mov    %sp,%bp
    7c20:	66 83 ec 10          	sub    $0x10,%sp
    int i;
    char s[] = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
    7c24:	67 66 c7 45 f1 68 65 	movw   $0x6568,-0xf(%di)
    7c2b:	6c                   	insb   (%dx),%es:(%edi)
    7c2c:	6c                   	insb   (%dx),%es:(%edi)
    7c2d:	67 66 c7 45 f5 6f 20 	movw   $0x206f,-0xb(%di)
    7c34:	77 6f                	ja     7ca5 <__stack_bottom+0x28>
    7c36:	67 c7 45 f9 72 6c 67 	movl   $0xc6676c72,-0x7(%di)
    7c3d:	c6 
    7c3e:	45                   	inc    %ebp
    7c3f:	fb                   	sti    
    7c40:	64 67 66 c7 45 fc 00 	movw   $0x0,%fs:-0x4(%di)
    7c47:	00 
    for (i = 0; i < sizeof(s); ++i) {
    7c48:	00 00                	add    %al,(%eax)
    7c4a:	eb 21                	jmp    7c6d <main+0x56>
        __asm__ (
            "int $0x10" : : "a" ((0x0e << 8) | s[i])
    7c4c:	67 66 8d 55 f1       	lea    -0xf(%di),%dx
    7c51:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7c56:	66 01 d0             	add    %dx,%ax
    7c59:	67 66 0f b6 00       	movzbw (%bx,%si),%ax
    7c5e:	66 0f be c0          	movsbw %al,%ax
    7c62:	80 cc 0e             	or     $0xe,%ah
        __asm__ (
    7c65:	cd 10                	int    $0x10
    for (i = 0; i < sizeof(s); ++i) {
    7c67:	67 66 83 45 fc 01    	addw   $0x1,-0x4(%di)
    7c6d:	67 66 8b 45 fc       	mov    -0x4(%di),%ax
    7c72:	66 83 f8 0a          	cmp    $0xa,%ax
    7c76:	76 d4                	jbe    7c4c <main+0x35>
        );
    }
    while (1) {
        __asm__ ("hlt");
    7c78:	f4                   	hlt    
    7c79:	eb fd                	jmp    7c78 <main+0x61>
